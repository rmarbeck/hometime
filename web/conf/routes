# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index()
GET     /revision-reparation-de-montres controllers.Application.indexAlternate()

# Service page
GET     /entretien-reparation       controllers.Application.service()
GET     /service                    controllers.Default.redirect(to = "/entretien-reparation")

# Customization page
GET     /personnaliser-sa-montre    controllers.Application.customization()

# Watches
GET     /les-montres-disponibles-a-l-essai       controllers.Application.watch_collection()
GET     /watches                    controllers.Default.redirect(to = "/les-montres")
GET     /les-montres                    controllers.Default.redirect(to = "/les-montres-disponibles-a-l-essai")

# Single watch
GET     /montre/:id                 controllers.Application.watch_detail_byId(id: Long)
GET     /montre-disponible-a-l-essai/:watch_seo_name      controllers.Application.watch_detail(watch_seo_name)

# Offer
GET     /les-services/l-offre       controllers.Application.offer()
GET     /offer                      controllers.Default.redirect(to = "/les-services/l-offre")

# More offer
GET     /les-services/les-autres-prestations     controllers.Application.more()
GET     /more                       controllers.Default.redirect(to = "/les-services/les-autres-prestations")

# Prices
GET     /les-services/les-prix      controllers.Application.prices()
GET     /prices                     controllers.Default.redirect(to = "/les-services/les-prix")

# Order
GET     /demande-de-devis           controllers.Application.order(brand = null)
GET     /demande-de-devis/montre/reparation/revision/:brand    controllers.Application.order(brand)
GET     /order                      controllers.Default.redirect(to = "/demande-de-devis")
POST    /demande-de-devis           controllers.Application.manageOrder()

# BuyRequest
GET     /rechercher-une-montre      controllers.Application.buyRequest()
POST    /rechercher-une-montre      controllers.Application.manageBuyRequest()

# Contact
GET     /nous-contacter             controllers.Application.contact(title: String ?= "")
GET     /hardCodedToContact         controllers.Default.redirect(to = "/nous-contacter")
POST    /nous-contacter             controllers.Application.manageContact()

# CallRequest
GET     /demande-de-rappel          controllers.Application.callRequest()
POST    /demande-de-rappel          controllers.Application.manageCallRequest()

# ServiceTest
GET     /quand-faire-la-revision    controllers.Application.service_test()
POST    /quand-faire-la-revision    controllers.Application.manageServiceTest()
GET     /checkResults/:id           controllers.Application.checkServiceTestResult(id: Integer, custom: Boolean ?= false, email: String ?= "toto@titi.fr")

# About
GET     /qui-sommes-nous            controllers.Application.about()
GET     /a-propos                   controllers.Default.redirect(to = "/qui-sommes-nous")
GET     /about                      controllers.Default.redirect(to = "/qui-sommes-nous")

# Legal
GET     /mentions-legales           controllers.Application.legal()
GET     /legal                      controllers.Default.redirect(to = "/mentions-legales")
GET     /hardCodedToLegal           controllers.Default.redirect(to = "/mentions-legales")

# FAQ
GET     /questions-frequentes       controllers.Application.faq()
GET     /faq                        controllers.Default.redirect(to = "/questions-frequentes")

# Privacy
GET     /vie-prive                  controllers.Application.privacy()
GET     /privacy                    controllers.Default.redirect(to = "/vie-prive")

# CGV
GET     /cgv                        controllers.Application.cgv()

# Autour
GET     /autour-de-hometime         controllers.Application.around()

# Water leak
GET     /prise-en-charge-urgente-probleme-etancheite    controllers.Application.water()
GET     /urgence-buee-sur-le-verre                      controllers.Default.redirect(to = "/prise-en-charge-rapide-probleme-etancheite")

# Broking
GET     /achat-de-montres-au-meilleur-prix    			controllers.Application.broking()
GET     /courtier-en-montres-occasion         			controllers.Default.redirect(to = "/achat-de-montres-au-meilleur-prix")

# Sell
GET     /vendez-votre-montre			    			controllers.Application.sell()
GET     /mandat-de-depot-vente-virtuel-de-montre		controllers.Default.redirect(to = "/vendez-votre-montre")

# Moon website
GET		/lune											controllers.Default.redirect(to = "http://www.patek.com/contents/default/fr/MoonphaseIndicatorSetting.html")

# Chrono24 page
GET		/chrono24										controllers.Default.redirect(to = "http://www.chrono24.fr/search/index.htm?dosearch=true&merchantName=watchnext")

# Usefull Links page
GET		/links											controllers.Application.usefull_links()

# Feedback
GET     /avis-clients               					controllers.Application.feedback()

# Payment
GET	    /paiement/error               					controllers.PaymentRequests.error()
POST    /paiement/error               					controllers.PaymentRequests.errorPost()
GET   	/paiement/success              					controllers.PaymentRequests.success()
POST    /paiement/backoffice           					controllers.PaymentRequests.manageBackOfficeAnswer()
GET     /paiement/:ak               					controllers.PaymentRequests.displayForm(ak: String)

# ADMIN
GET     /login                      									controllers.Application.login(origin: String ?= "")
POST    /login                      									controllers.Application.authenticate()
GET     /quick-login                   									controllers.Application.quickAdminLogin(origin: String ?= "")
POST    /quick-login                   									controllers.Application.quickAdminAuthenticate()
GET     /logout                     									controllers.Application.logout()
GET     /admin/		                    								controllers.Admin.index()

POST    /admin/search													controllers.Admin.search()
GET     /admin/search/view/:pattern/:id    								controllers.Admin.viewSearchable(pattern: String, id: Long)
GET     /admin/search/edit/:pattern/:id									controllers.Admin.editSearchable(pattern: String, id: Long)

GET     /admin/order-request/all    									controllers.Admin.displayOrderRequests(p:Int ?= 0, s ?= "requestDate", o ?= "desc", f ?= "")
GET     /admin/order-request/:id    									controllers.Admin.displayOrderRequest(id: Long)
GET     /admin/prepare-mail/:id    										controllers.Admin.displayPrepareMail(id: Long)
GET     /admin/order-request-close/:id   								controllers.Admin.closeOrderRequest(id: Long)
GET     /admin/order-request-set-replied/:id							controllers.Admin.setRepliedOrderRequest(id: Long)
GET     /admin/order-request-change-feedback-asked/:id					controllers.Admin.changeFeedbackAsked(id: Long)
GET     /admin/order-request-set-infos									controllers.Admin.manageOrderRequestInfos()

GET     /admin/buy-request/all    										controllers.BuyRequest.displayBuyRequests(p:Int ?= 0, s ?= "requestDate", o ?= "desc", f ?= "")
GET     /admin/buy-request/:id    										controllers.BuyRequest.displayBuyRequest(id: Long)
GET     /admin/notify-buy-request/:id     								controllers.BuyRequest.displayBuyRequestMail(id: Long)
GET     /admin/buy-request-proposal           							controllers.BuyRequest.prepareProposal()
GET     /admin/buy-request-proposal/:id   								controllers.BuyRequest.prepareProposalFromRequest(id: Long)
POST    /admin/manage-buy-request-proposal								controllers.BuyRequest.manageProposal()
GET     /admin/buy-request-close/:id   									controllers.BuyRequest.closeBuyRequest(id: Long)
GET     /admin/buy-request-set-replied/:id								controllers.BuyRequest.setRepliedBuyRequest(id: Long)

GET     /admin/customer/display/:id    									controllers.Customer.display(id: Long)
GET     /admin/customer/all    											controllers.Customer.displayAll(p:Int ?= 0, s ?= "creationDate", o ?= "desc", f ?= "")
GET     /admin/customer/create/from-request/:id 						controllers.Customer.addFromRequest(id: Long)
GET     /admin/customer/create						 					controllers.Customer.add()
GET     /admin/customer/edit/:id 										controllers.Customer.edit(id: Long)
POST    /admin/manage-customer 											controllers.Customer.manage()

GET     /admin/customer-watch/display/:id								controllers.CustomerWatch.display(id: Long)
GET     /admin/customer-watch/all    									controllers.CustomerWatch.displayAll(p:Int ?= 0, s ?= "lastStatusUpdate", o ?= "desc", f ?= "", status ?= "")
GET     /admin/customer-watch-part/all    								controllers.CustomerWatch.displayWatchesForPartner(p:Int ?= 0, s ?= "lastStatusUpdate", o ?= "desc", f ?= "", status ?= "")
GET     /admin/customer-watch/create/from-customer/:id 					controllers.CustomerWatch.addFromCustomer(id: Long)
GET     /admin/customer-watch/create/from-order/:id 					controllers.CustomerWatch.addFromOrder(id: Long)
GET     /admin/customer-watch/create				 					controllers.CustomerWatch.add()
GET     /admin/customer-watch/edit/:id 									controllers.CustomerWatch.edit(id: Long)
GET     /admin/customer-watch/set-back-to-customer/:id 									controllers.CustomerWatch.setBackToCustomer(id: Long)
POST    /admin/manage-customer-watch 									controllers.CustomerWatch.manage()

GET     /admin/watch/display/:id										controllers.Watch.display(id: Long)
GET     /admin/watch/all    											controllers.Watch.displayAll(p:Int ?= 0, s ?= "id", o ?= "desc", f ?= "")
GET     /admin/watch/create				 								controllers.Watch.add()
GET     /admin/watch/edit/:id 											controllers.Watch.edit(id: Long)
POST    /admin/manage-watch 											controllers.Watch.manage()

GET     /admin/feedback/display/:id										controllers.Feedback.display(id: Long)
GET     /admin/feedback/all    											controllers.Feedback.displayAll(p:Int ?= 0, s ?= "display_date", o ?= "desc", f ?= "")
GET     /admin/feedback/create				 							controllers.Feedback.add()
GET     /admin/feedback/edit/:id 										controllers.Feedback.edit(id: Long)
POST    /admin/manage-feedback											controllers.Feedback.manage()

GET     /admin/link/display/:id											controllers.UsefullLink.display(id: Long)
GET     /admin/link/all    												controllers.UsefullLink.displayAll(p:Int ?= 0, s ?= "creation_date", o ?= "desc", f ?= "")
GET     /admin/link/create					 							controllers.UsefullLink.add()
GET     /admin/link/edit/:id	 										controllers.UsefullLink.edit(id: Long)
POST    /admin/manage-link												controllers.UsefullLink.manage()

GET     /admin/order/display/:id										controllers.Order.display(id: Long)
GET     /admin/order/all    											controllers.Order.displayAll(p:Int ?= 0, s ?= "creationDate", o ?= "desc", f ?= "")
GET     /admin/order/create/from-request/:id 							controllers.Order.addFromRequest(id: Long)
GET     /admin/order/create/from-customer/:id 							controllers.Order.addFromCustomer(id: Long)
GET     /admin/order/create/from-customer-watch/:id 					controllers.Order.addFromCustomerWatch(id: Long)
GET     /admin/order/create				 								controllers.Order.add()
GET     /admin/order/edit/:id 											controllers.Order.edit(id: Long)
POST    /admin/manage-order			 									controllers.Order.manage()

GET     /admin/notify-order-request/:id     							controllers.Admin.displayMail(id: Long)
GET     /admin/service/all          									controllers.Admin.displayServiceTests(p:Int ?= 0, s ?= "requestDate", o ?= "desc", f ?= "")
GET     /admin/service/:id          									controllers.Admin.displayServiceTest(id: Long)
GET     /admin/quotation            									controllers.Admin.prepareQuotation()
GET     /admin/quotation/:id        									controllers.Admin.prepareQuotationFromOrder(id: Long, inNetwork: Boolean ?= false)
GET     /admin/quotation/:id/:pId   									controllers.Admin.prepareQuotationFromOrderWithPreset(id: Long, pId: Long, inNetwork: Boolean ?= false)
POST    /admin/manage-quotation     									controllers.Admin.manageQuotation()

GET     /admin/invoice            										controllers.Accounting.display()
GET     /admin/invoice/create          									controllers.Accounting.addInvoice()
GET     /admin/invoice/create/by/watch-to-sell/:id						controllers.Accounting.addInvoiceByWatchToSellId(id: Long)
GET     /admin/invoice/create/by/customer/:id							controllers.Accounting.addInvoiceFromCustomer(id: Long)
GET     /admin/invoice/create/by/order/:id								controllers.Accounting.addInvoiceByOrderId(id: Long)
GET     /admin/invoice/edit/:id         								controllers.Accounting.editInvoice(id: Long)
POST    /admin/manage-invoice            								controllers.Accounting.manageInvoice()
GET     /admin/invoices            										controllers.Accounting.displayAllInvoice(p:Int ?= 0, s ?= "uniqueAccountingNumber", o ?= "desc", f ?= "")
GET     /admin/invoice/:id         										controllers.Accounting.viewInvoice(id: Long)

GET     /admin/order-document/create          							controllers.Accounting.addOrderDocument()
GET     /admin/order-document/create/by/watch-to-sell/:id				controllers.Accounting.addOrderDocumentByWatchToSellId(id: Long)
GET     /admin/order-document/create/by/customer/:id					controllers.Accounting.addOrderDocumentFromCustomer(id: Long)
GET     /admin/order-document/edit/:id         							controllers.Accounting.editOrderDocument(id: Long)
POST    /admin/manage-order-document            						controllers.Accounting.manageOrderDocument()
GET     /admin/order-documents            								controllers.Accounting.displayAllOrderDocument(p:Int ?= 0, s ?= "uniqueAccountingNumber", o ?= "desc", f ?= "")
GET     /admin/order-document/:id         								controllers.Accounting.viewOrderDocument(id: Long)

GET     /admin/selling-document/create          						controllers.Accounting.addSellingDocument()
GET     /admin/selling-document/edit/:id         						controllers.Accounting.editSellingDocument(id: Long)
POST    /admin/manage-selling-document            						controllers.Accounting.manageSellingDocument()
GET     /admin/selling-documents            							controllers.Accounting.displayAllSellingDocument(p:Int ?= 0, s ?= "uniqueAccountingNumber", o ?= "desc", f ?= "")
GET     /admin/selling-document/:id         							controllers.Accounting.viewSellingDocument(id: Long)

GET		/admin/display/:model/All										controllers.CrudHelper.displayAll(model: String, d:Int ?=20)
GET		/admin/display/:model/:id										controllers.CrudHelper.display(model: String, id: Long)
GET		/admin/display/:model/page/										controllers.CrudHelper.page(model: String, p:Int ?= 0, s ?= "id", o ?= "desc", f ?= "", d:Int ?=10)
GET		/admin/create/:model											controllers.CrudHelper.create(model: String)
GET		/admin/edit/:model/:id											controllers.CrudHelper.edit(model: String, id: Long)
POST	/admin/manage/:model											controllers.CrudHelper.manage(model: String)

GET     /admin/post-service-certificate/create/by/watch/:id				controllers.Accounting.addPServiceCByWatchId(id: Long)
GET     /admin/post-selling-certificate/create/by/watch/:id				controllers.Accounting.addPSellingCByWatchId(id: Long)

GET		/admin/follow/external/document/url/:id							controllers.Admin.goToExternalDocumentUrl(id: Long)

GET     /admin/margin-vat-report            							controllers.Reporting.marginVat()
GET     /admin/export-sales-report            							controllers.Reporting.exportSales()
GET     /admin/with-vat-report            								controllers.Reporting.withVat()
GET     /admin/invoice-lines											controllers.Reporting.invoiceLines()
GET     /admin/addresses		            							controllers.Reporting.addresses()
GET     /admin/addresses-table	            							controllers.Reporting.addressesAlt()
GET     /admin/addressbook		            							controllers.Reporting.addressBook()
GET     /admin/stock			            							controllers.Reporting.stock()
GET     /admin/legal-register	            							controllers.Reporting.legalRegister()
GET     /admin/payments			            							controllers.Reporting.payments()

GET     /admin/test			            								controllers.Admin.test()

GET     /admin/watch-to-sell/duplicate/:id       						controllers.WatchesToSell.duplicateWatch(id: Long)

GET     /admin/mail-template/duplicate/:id       						controllers.MailTemplates.duplicateMailTemplate(id: Long)

GET		/admin/create-from-order/PaymentRequests/:id					controllers.PaymentRequests.createFromOrder(id: Long)
GET		/admin/create-from-invoice/PaymentRequests/:id					controllers.PaymentRequests.createFromInvoice(id: Long)

GET		/admin/create-from-invoice/Payments/:id							controllers.Payments.createFromInvoice(id: Long)

GET     /admin/cgv				            							controllers.Admin.cgv()

GET		/admin/watchesAsJson											controllers.WatchesToSell.watchesAsJSon()

# Sitemap
GET     /sitemap.xml													controllers.Application.sitemap()
GET     /plan-du-site													controllers.Application.siteplan()

# Map specifically to robots.txt
GET     /robots.txt														controllers.Assets.at(path="/public", file="robots.txt")

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file													controllers.Assets.at(path="/public", file)

HEAD    /																controllers.Application.autoHead(originalPath:String ?= "/")
HEAD    /*originalPath													controllers.Application.autoHead(originalPath:String)

